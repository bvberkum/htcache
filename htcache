#! /usr/bin/env python
"""
"""



import sys
import weakref
import traceback


# XXX: development tooling:
try:
	import coverage
	coverage.process_startup()
except ImportError, e:
	pass


import Command
import Runtime
import Request
import Protocol
import Response
import fiber
import log


mainlog = log.get_log('main')


DOWNLOADS = Runtime.DOWNLOADS = weakref.WeakValueDictionary()


def htproxy_fiber_handler( client, address ):

	mainlog.debug("[ HTPROXY ] Log level is at %s", log.name(Runtime.LOG_LEVEL))

	request = Request.HttpRequest()
	protocol = None
	while not request.Protocol:
		yield fiber.RECV( client, Runtime.TIMEOUT )
		request.recv( client )

	try:
		while request in DOWNLOADS:
			protocol = DOWNLOADS[ request ]
			if protocol.Response:
				if issubclass( protocol.Response, Response.DataResponse ):
					mainlog.info('[ HTCACHE ] Checking with %r for data for %r ' % (protocol, request))
					break
				del DOWNLOADS[ request ]
			else:
				yield fiber.WAIT()
		else:
			mainlog.info('[ HTCACHE ] Switching to %s', request.Protocol.__name__)
			protocol = DOWNLOADS[ request ] = request.Protocol( request )
			mainlog.debug('[ HTCACHE ] %s: New %s for %s', protocol,
							request.Protocol.__name__, request)

			server = protocol.socket()
			while not protocol.Response:
				if protocol.hasdata():
					yield fiber.SEND( server, Runtime.TIMEOUT )
					protocol.send( server )
				else:
					yield fiber.RECV( server, Runtime.TIMEOUT )
					protocol.recv( server )

		response = protocol.Response( protocol, request )
		server = protocol.socket()
		mainlog.debug('[ HTCACHE ] %s: New %s for %s', response,
						response.__class__.__name__, request)

	except Exception, e:
		mainlog.crit('[ HTCACHE ] Warning: Switching to ExceptionResponse, reason: %s', e)
		response = Response.ExceptionResponse( request )

	while not response.Done:
		if response.hasdata():
			yield fiber.SEND( client, Runtime.TIMEOUT )
			response.send( client )
		elif response.needwait():
			yield fiber.WAIT( response.needwait() )
		else:
			yield fiber.RECV( server, Runtime.TIMEOUT )
			response.recv( server )

	mainlog.note('[ HTCACHE ] Transaction completed for %r with data %s', 
			request, protocol)


Runtime.loggers['main'].config(Runtime.LOG_LEVEL, 'stdout')


def run():

	# Parse argv, init settings
	try:

		Command.CLIRuntime().parse()

	except Exception:
		traceback.print_exc()
		print >>sys.stderr, "Failure during initalization"

	Protocol.init_scrap()

	### Cache Maintenance static entry - exits upon completion

	while True:
		try:
			fiber.spawn(
					htproxy_fiber_handler,
					Runtime.HOSTNAME,
					Runtime.PORT,
					Runtime.DEBUG,
					Runtime.LOG,
					Runtime.PID_FILE )

		except fiber.Restart, e:
			Resource.SessionMixin.close_instance('default')
			for mod in ( Runtime, Runtime, Command, Protocol, Request, Response, Resource, fiber):
				mod = reload(mod)

		except Exception, e:
			traceback.print_exc()
			sys.exit(1)
			break


if __name__ == '__main__':
	run()

