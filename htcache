#! /usr/bin/env python
import sys, time, weakref, traceback

import Params, Protocol, Request, Response, Runtime, fiber
import Resource
import Rules

import os
import sys
import time
import weakref



# XXX: development tooling:
try:
    import coverage
    coverage.process_startup()
except ImportError, e:
    pass


import Params, Cache, Protocol, Request, Response, Resource, fiber



DOWNLOADS = Runtime.DOWNLOADS = weakref.WeakValueDictionary()
"""
Global set of download sessions, each being a request, protocol mapping.

Only one download per resource is needed, just the first request is kept here.
Each subsequent session will cannot overwrite the file, but can "join" the download
by switching to the response fase.

XXX: This also allows local lookup of resources, ie. to rewrite the cache location
to locally stored data.
"""

def HTCache_fiber_handler( client, address ):

    Params.log('New Request from %s:%i, downloads: %s; +1' % (
        address + (len(DOWNLOADS),)))

    protocol = None
    request = Request.HtRequest()
    while not request.Protocol:
        yield fiber.RECV( client, Params.TIMEOUT )
        request.recv( client )

    try:
        while request in DOWNLOADS:
            protocol = DOWNLOADS[ request ]
            if protocol.Response:
                if issubclass( protocol.Response, Response.DataResponse ):
                    Params.log('Joined running download')
                    break
                del DOWNLOADS[ request ]
            else:
                yield fiber.WAIT()
        else:
            Params.log('Switching to %s'% request.Protocol.__name__, 3)
            protocol = DOWNLOADS[ request ] = request.Protocol( request )
            server = protocol.socket()
            while not protocol.Response:
                if protocol.hasdata():
                    yield fiber.SEND( server, Params.TIMEOUT )
                    protocol.send( server )
                else:
                    yield fiber.RECV( server, Params.TIMEOUT )
                    protocol.recv( server )
        Params.log('Switching to %s'% protocol.Response.__name__, 2)
        response = protocol.Response( protocol, request )
        server = protocol.socket()
    except Exception:
        Params.log('Warning: Switching to ExceptionResponse')
        response = Response.ExceptionResponse( protocol, request )

    # blocks while client has not read data
    while not response.Done:
        if response.hasdata():
            yield fiber.SEND( client, Params.TIMEOUT )
            response.send( client )
        elif response.needwait():
            yield fiber.WAIT( response.needwait() )
        else:
            yield fiber.RECV( server, Params.TIMEOUT )
            response.recv( server )

    Params.log('Transaction completed', 1)

    if protocol:
        if response:
            response.finalize(client)
        #protocol.descriptors.close()

def load():
    Rules.parse_droplist()
    Rules.parse_nocache()
    Rules.Join.parse()
    Rules.parse_rewritelist()


### Cache Maintenance static entry

Command.CLIParams.parse()

if Command.run_evokation():
    sys.exit(0)

# or start main proxy  loop

while True:
    load()
    try:
        Resource.get_backend()
        fiber.spawn(
                HTCache_fiber_handler,
                Params.PORT,
                Params.DEBUG,
                Params.LOG,
                Params.PID_FILE )

    except fiber.Restart, e:
        Resource.get_backend().close()
        for mod in ( Params, Protocol, Request, Response, Resource, fiber):
            mod = reload(mod)

    except Exception, e:
        traceback.print_exc()
        sys.exit(1)
        break

Resource.get_backend().close()

