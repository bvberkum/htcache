#! /usr/bin/env python
import os
import sys
import time
import weakref

try:
    import coverage
    coverage.process_startup()
except ImportError, e:
    pass

import Params, Protocol, Request, Response, Resource, fiber

DOWNLOADS = weakref.WeakValueDictionary()

Params.parse_droplist()
Params.parse_nocache()
Params.parse_joinlist()
#Params.parse_rewritelist()


def HTCache( client, address ):

    Params.log('Accepted request from %s:%i' % address, 1)

    request = Request.HttpRequest()
    protocol = None
    while not request.Protocol:
        yield fiber.RECV( client, Params.TIMEOUT )
        request.recv( client )

    try:
        while request in DOWNLOADS:
            protocol = DOWNLOADS[ request ]
            if protocol.Response:
                if issubclass( protocol.Response, Response.DataResponse ):
                    Params.log('Joined running download')
                    break
                del DOWNLOADS[ request ]
            else:
                yield fiber.WAIT()
        else:
            Params.log('Switching to %s'% request.Protocol.__name__, 3)
            protocol = DOWNLOADS[ request ] = request.Protocol( request )
            server = protocol.socket()
            while not protocol.Response:
                if protocol.hasdata():
                    yield fiber.SEND( server, Params.TIMEOUT )
                    protocol.send( server )
                else:
                    yield fiber.RECV( server, Params.TIMEOUT )
                    protocol.recv( server )
        Params.log('Switching to %s'% protocol.Response.__name__, 2)
        response = protocol.Response( protocol, request )
        server = protocol.socket()
    except Exception:
        Params.log('Warning: Switching to ExceptionResponse')
        response = Response.ExceptionResponse( protocol, request )

    while not response.Done:
        if response.hasdata():
            yield fiber.SEND( client, Params.TIMEOUT )
            response.send( client )
        elif response.needwait():
            yield fiber.WAIT( response.needwait() )
        else:
            yield fiber.RECV( server, Params.TIMEOUT )
            response.recv( server )

    Params.log('Transaction successfully completed')

    #if protocol:
    #    if response.Done:
    response.finalize(client)
    #protocol.descriptors.close()


# XXX: more neat in fiber than here, move.
while True:
    try:
        fiber.spawn( HTCache, Params.PORT, Params.DEBUG, Params.LOG,
                Params.PID_FILE )
    except fiber.Restart, e:
        Resource.get_backend().close()
        for mod in (Params, Protocol, Request, Response, Resource, fiber):
            mod = reload(mod)
        Params.parse_droplist()
        Params.parse_nocache()
        Params.parse_joinlist()
    except Exception, e:
        Params.log(e)
        break

Resource.get_backend().close()

