./Resource.py:342:        # FIXME: Client may have a cache too that needs to be
./Resource.py:632:#/FIXME
./Protocol.py:205:        if Runtime.STATIC and self.cache.full: # FIXME
./protocol-test:4:- FIXME: should cover a good deal of HTTP stuff.
./Rules.py:167:                    log('FIXME: Renaming: %s --> %s' % (fpath2, fpath), threshold=Params.LOG_NOTE)
./Rules.py:177:# FIXME: drop rules
./Rules.py:209:# FIXME: parse rewrite rules

./Cache.py:2:TODO:
./Resource.py:334:        # TODO: RFC 2616 14.35.2 Range requests and partial content response
./Resource.py:336:        # TODO: RFC 2616 14.9.4: Cache revalidation and reload controls
./Resource.py:338:        # TODO: Store relationship with 
./Resource.py:703:# TODO: find_records by attribute query
./Resource.py:742:# TODO: integrate with other print_info
./Resource.py:770:        # TODO: documents
./Request.py:3:TODO: determine cachability.
./main.rst:30:            - TODO: ``--keep-cache`` mark location revisioning
./main.rst:31:            - TODO: ``--validate-tree`` resource cache should match size, checksum
./main.rst:32:            - TODO: ``--validate-joinlist`` resource should have been rewritten
./main.rst:33:            - TODO: ``--validate-joinlist --auto`` rename if possible
./main.rst:34:            - TODO: ``--validate-lists`` 
./main.rst:35:            - TODO: ``--check-joinlist`` run testlines from JOIN,  
./main.rst:36:            - TODO: ``--check-lists``
./main.rst:37:            - TODO: abstract, refactor query/maintenance mode handling. Allow
./main.rst:39:            - TODO: ``--print-allrecords`` simply dump?
./main.rst:40:            - TODO: ``--print-record`` query
./main.rst:41:            - TODO: ``--print-records`` query
./main.rst:42:            - TODO: ``--print-media`` query
./CHANGELOG.rst:1:TODO htcache version 1.0 (planned)
./Response.py:77:        # TODO: on/off:
./Response.py:160:        # TODO: store hash for new recv'd content
./Response.py:390:        # TODO: echos only
./Command.py:103:                # TODO: allow port in address
./Command.py:138:                "TODO: limit download rate at a fixed K/s", dict(
./Command.py:228:                "TODO: bypass caching for requests based on URL regex pattern", 
./Command.py:297:                "TODO: ", 
./Command.py:341:#                "TODO: iterate cache references", _attr(_cmd)
./Command.py:344:                "TODO: Remove resources no longer online.", _attr(_cmd)
./Command.py:351:                "TODO: Symlink duplicate content, check by size and hash."
./Command.py:354:#     TODO --print-mode line|tree
./Command.py:355:#     TODO --print-url
./Command.py:356:#     TODO --print-path
./Command.py:358:#     TODO --print-documents
./Command.py:359:#     TODO --print-videos
./Command.py:360:#     TODO --print-audio
./Command.py:361:#     TODO --print-images

./Resource.py:93:            # XXX: Try again, should make a list of alternate (but invalid) date formats
./Resource.py:112:# XXX:            if self.cache.stat():
./Resource.py:155:        XXX: The associated resource should be initalized later.
./Resource.py:221:# XXX
./Resource.py:237:# XXX:'content-md5': (str,'content.md5'),
./Resource.py:280:        if self.descriptor.id: assert self.cache.mtime > -1, "XXX"
./Resource.py:332:        # XXX: should it do something with encoding?
./Resource.py:340:        # XXX: anonymize, check with [RFC 2616 14.36]
./Resource.py:382:            # XXX: allow for opaque moves of descriptors
./Resource.py:389:            # /XXX
./Resource.py:425:# XXX: this should mve into Cache again:
./Resource.py:449:# XXX
./Resource.py:457:# XXX
./Resource.py:466:        XXX: Even when the current download is still running, this needs to have the
./Resource.py:478:        #    "XXX: sanity check, cannot have partial served content, serve error instead"
./Resource.py:495:        # XXX: read_only
./Resource.py:512:    # XXX: SessionMixin.key_names
./Resource.py:823:# XXX old
./Resource.py:861:# XXX: hardcoded paths.. replace once Cache/Resource is properly implemented
./Resource.py:869:# XXX: cannot reconstruct--, or should always normalize?
./Resource.py:901:# XXX: hardcoded paths.. replace once Cache/Resource is properly implemented
./Resource.py:909:# XXX: cannot reconstruct--, or should always normalize?
./Protocol.py:90:    "XXX: old indicator to track hashsum of response entity."
./Protocol.py:94:        # XXX: update this with data from content-location
./Protocol.py:124:        # XXX: Respond by writing message as plain text, e.g echo/debug it:
./Protocol.py:231:# XXX: the other way around?
./Protocol.py:274:                key = key.title() # XXX: bad? :)
./Protocol.py:309:# XXX: chunking..
./Protocol.py:347:# XXX:
./Protocol.py:355:            assert self.cache.full, "XXX sanity"
./Protocol.py:380:# XXX
./Protocol.py:426:            log("XXX: Rewriting HTML resource: "+self.url, Params.LOG_NOTE)
./Request.py:29:    XXX: HtRequest may want to skip buffering large uploads into memory.
./Request.py:179:            # XXX self.Protocol = Protocol.BlindProtocol
./Request.py:207:# XXX: need a test for this
./Request.py:248:        # XXX: If-Range
./Request.py:285:        # XXX: used before protocol is determined,  assert self.Protocol
./control.rst:21:        May cache and serve. XXX: while fresh?
./HTCache.hx:34:        // XXX: figure out a way to set global cookie? iframe from proxy?
./main.rst:188:- XXX: caches.FileTreeQ - encodes each query argument into a separate directory,
./main.rst:230:XXX:
./main.rst:301:                      |            `--------ok--> XXX:RewrittenDataResponse (6)
./main.rst:312:XXX: states
./main.rst:426:XXX: could a deeper tree be created by symlinking? think so..
./util.py:6:# XXX: Dont use cjson, its buggy, see comments at
./Response.py:81:# XXX: this may need to be on js serving..
./Response.py:153:                #XXX:if not self.__protocol.cache.full():
./Command.py:124:# XXX: write macro to fix this:
./Command.py:136:#/XXX
./Command.py:152:                "XXX: try ipv6 addresses if available", dict(
./Command.py:195:            (("--static-dir",), "XXX: Change location of static datafiles. "
./Command.py:232:                "XXX: content rewrite any webresource by selecting on URL or ...??", 
./Command.py:238:                " may be a problem if its contents has any differences. XXX: read"
./Command.py:243:                "XXX: append manual rule", dict()
./Command.py:246:                "XXX: validate and run tests", 
./Command.py:250:                "XXX: re-run", 
./Command.py:256:                "increase output, XXX: use twice to show http headers", dict(
./Command.py:277:                "XXX: turn of output printing?", dict(
./Command.py:313:                "XXX: Query for one or more records by regular expression.", 
./Command.py:339:# XXX:
./Command.py:482:# XXX:
./Command.py:514:# XXX: Maintenance
./Terminal.py:1:# XXX: unintegrated ANSI terminal wrapper
./Rules.py:33:# XXX: could put tab back into JOIN rules file, also parse continuous
./Params.py:60:ALTTIMEFMT = '%a, %d %b %H:%M:%S CEST %Y' # XXX: foksuk.nl
./system-test:139:# XXX: could not figure out a way to make wget save (headers) for non 200
./system-test:355:    # XXX: No headers are ever present, need to check if older versions did
./system-test:411:# XXX: cannot test without descriptor of aux. command to load descriptor into DB
./system-test:447:# XXX: cannot test without descriptor of aux. command to load descriptor into DB
./htcache:9:# XXX: development tooling:
./htcache:36:XXX: This also allows local lookup of resources, ie. to rewrite the cache location
./htcache:73:                # XXX: continues to handle response
./htcache:147:        # XXX: programming catch


